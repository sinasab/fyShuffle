{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["parseItems","input","trim","split","flatMap","item","map","Textarea","styled","textarea","withConfig","displayName","componentId","fyShuffle","items","shuffled","length","randomIndex","rngInt","push","popped","pop","min","max","Math","floor","randomBuffer","Uint32Array","window","crypto","getRandomValues","rng","Boolean","location","hostname","match","ReactDOM","render","react_default","a","createElement","_useState","useState","_useState2","Object","slicedToArray","setInput","_useState3","_useState4","setShuffled","onChange","e","target","value","onClick","type","readOnly","join","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sLA8BMA,EAAa,SAACC,GAAD,OACjBA,EACGC,OACAC,MAAM,MACNC,QAAQ,SAAAC,GAAI,OAAIA,EAAKF,MAAM,OAC3BG,IAAI,SAAAD,GAAI,OAAIA,EAAKH,UAEhBK,EAAWC,IAAOC,SAAVC,WAAA,CAAAC,YAAA,gBAAAC,YAAA,WAAGJ,CAAH,sDAQRK,EAAY,SAACC,GAEjB,IADA,IAAMC,EAAW,GACVD,EAAME,QAAQ,CACnB,IAAMC,EAAcC,EAAO,EAAGJ,EAAME,QACpCD,EAASI,KAAKL,EAAMG,IACpB,IAAMG,EAASN,EAAMO,MACjBJ,IAAgBH,EAAME,SACxBF,EAAMG,GAAeG,GAGzB,OAAOL,GAeHG,EAAS,SAACI,EAAaC,GAAd,OACbC,KAAKC,MAZK,WACV,IAAMC,EAAe,IAAIC,YAAY,GAKrC,OAHAC,OAAOC,OAAOC,gBAAgBJ,GAETA,EAAa,GAAb,WAOVK,IAASR,EAAMD,GAAOA,IC3DfU,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOC,EAAAC,EAAAC,cFFa,WAAM,IAAAC,EACPC,mBAAS,IADFC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC1BxC,EAD0B0C,EAAA,GACnBG,EADmBH,EAAA,GAAAI,EAEDL,mBAAS,IAFRM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAE1BhC,EAF0BiC,EAAA,GAEhBC,EAFgBD,EAAA,GAIjC,OACEV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,mCAEFF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACjC,EAAD,CAAU2C,SAAU,SAAAC,GAAC,OAAIL,EAASK,EAAEC,OAAOC,QAAQA,MAAOpD,KAE5DqC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEc,QAAS,kBAAML,EAAYpC,EAAUb,EAAWC,MAChDsD,KAAK,UAFP,YAOFjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACjC,EAAD,CAAUiD,UAAQ,EAACH,MAAOtC,EAAS0C,KAAK,WEnBhC,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bc9e43d8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components/macro\";\n\nexport const App: React.FC = () => {\n  const [input, setInput] = useState(\"\");\n  const [shuffled, setShuffled] = useState([] as string[]);\n\n  return (\n    <div>\n      <header>\n        <h1>Fisher-Yates Shuffle</h1>\n      </header>\n      <div>\n        <Textarea onChange={e => setInput(e.target.value)} value={input} />\n      </div>\n      <div>\n        <button\n          onClick={() => setShuffled(fyShuffle(parseItems(input)))}\n          type=\"button\"\n        >\n          Shuffle\n        </button>\n      </div>\n      <div>\n        <Textarea readOnly value={shuffled.join(\"\\n\")} />\n      </div>\n    </div>\n  );\n};\n\nconst parseItems = (input: string) =>\n  input\n    .trim()\n    .split(\"\\n\")\n    .flatMap(item => item.split(\",\"))\n    .map(item => item.trim());\n\nconst Textarea = styled.textarea`\n  height: 100px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n`;\n\n// Fisher-Yates shuffle, in-place\n// see https://bost.ocks.org/mike/shuffle/ for inspiration\nconst fyShuffle = (items: string[]) => {\n  const shuffled = [];\n  while (items.length) {\n    const randomIndex = rngInt(0, items.length);\n    shuffled.push(items[randomIndex]);\n    const popped = items.pop() as string;\n    if (randomIndex !== items.length) {\n      items[randomIndex] = popped;\n    }\n  }\n  return shuffled;\n};\n\n// Generates a random number between 0 and 1; [0,1)\nconst rng = () => {\n  const randomBuffer = new Uint32Array(1);\n  // get 32 bits of randomness\n  window.crypto.getRandomValues(randomBuffer);\n  // convert to randomness between 0 and 1\n  const randomNumber = randomBuffer[0] / (0xffffffff + 1);\n  return randomNumber;\n};\n\n// Generates a random number between min and max -- [min,max)\n// min is \"inclusive\", max is \"exclusive\"\nconst rngInt = (min: number, max: number) =>\n  Math.floor(rng() * (max - min) + min);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}